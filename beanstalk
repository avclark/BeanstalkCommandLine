#!/usr/bin/php -q
<?php
error_reporting(1);
date_default_timezone_set('Europe/London');
/**
* @package Beanstalk
* @author Leon Barrett
* @link https://github.com/leonbarrett/BeanstalkappCLI
* @copyright Copyright (c) 2011, Leon Barrett
*/
class Beanstalk
{
		
	//Beanstalk account name
	private $beanstalk_account;
	
	//Beanstalk user name
	private $beanstalk_username;
	
	//Beanstalk password
	private $beanstalk_password;
	
	//List of allowed function names
	private static $_valid_cli_params = array(
		'repo',
		'repo:create',
		'create-empty',
		'create-git',
		'repo:deploy',
		'repo:deployall',
		'help',
		'repo:list',
		'repo:info',
		'repo:changes',
		'repo:releases',
		'account:config',
		'account:config',
		'web:dashboard',
		'web:repos',
	);
	
	//List of allowed Beanstalk colours (for repos, release servers etc)
	private static $_valid_beanstalk_colours = array(
		'red',
		'orange',
		'yellow',
		'green',
		'blue',
		'pink',
		'grey',
	);
	
	//List of allowed Beanstalk repo types
	private static $_valid_beanstalk_repo_types = array(
		'svn',
		'git',
	);
	
	//  Colour 
	public function colourOutput($text, $status) {
	$out = "";
	switch($status) {
		case "label-red":
		$out = "[0;31m";
		break;
		case "label-orange":
		$out = "[0;31m";
		break;		
		case "label-yellow":
		$out = "[0;33m"; 
		break;
		case "label-green":
		$out = "[0;32m";
		break;
		case "label-blue":
		$out = "[0;34m";
		break;
		case "label-pink":
		$out = "[0;31m";
		break;
		case "label-grey":
		$out = "[0;37m";
		break;			
	}
	return chr(27) . "$out" . "$text" . chr(27) . "[0m";
	}
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 *
	 * @access public
	 * @author Leon Barrett
	 */
	public function __construct()
	{
		$config_file = $_SERVER['HOME'].DIRECTORY_SEPARATOR.'beanstalk_cli.config';

		if (file_exists($config_file) && parse_ini_file($config_file)):
				$config = parse_ini_file($config_file, TRUE);

				$this->beanstalk_account = $config['account_settings']['account'];
				$this->beanstalk_username = $config['account_settings']['username'];
				$this->beanstalk_password = $config['account_settings']['password'];
			else:				
				$this->update_config();
		endif;
	
			
	} // End of __construct
	
// ------------------------------------------------------------------------
	
	/**
	 * Checks that the 1st parameter matches a set array, and then calls a function if so
	 * Will throw an error if function is not defined
	 *
	 * @access public
	 * @static
	 * @param array $args : $argv;
	 * @return void|bool : Throws an Exception if validation fails. Otherwise, return TRUE.
	 * @author Leon Barrett
	 */
	public function init($args)
	{
		// First thing to do is to verify that the first parameter is a valid keyword!
		if (!in_array($args[1], self::$_valid_cli_params))
			throw new Exception($this->help('beanstalk: '.$args[1]. ' is not a valid option'));
		
		//Call required function based on user input
		$action = $args[1];
		
		switch($action){
			
			case 'repo':
				self::_display_message('ERROR', 'Method depreciated. Please type beanstalk help for more info');
			break;
			
			case 'repo:create':
				//self::create_repo($args);
				self::create_repo_wizard($args);
			break;
			
			case 'create-git':
				self::_display_message('ERROR', 'Method depreciated. Please use beanstalk repo:create');
				//self::create_git_repo($args);
			break;
			
			case 'create-empty':
				self::_display_message('ERROR', 'Method depreciated. Please use beanstalk repo:create');
				//self::create_empty_repo($args);
			break;
			
			case 'repo:deploy':
				self::create_release($args,'single');
			break;
			
			case 'repo:deployall':
				self::create_release($args,'all');
			break;
			
			case 'repo:list':
				self::list_repos();
			break;
			
			case 'help':
				self::help();
			break;
			
			case 'repo:info':
				self::fetch_repo($args);
			break;
			
			case 'repo:changes':
				self::fetch_changes($args);
			break;
			
			case 'repo:releases':
				self::fetch_releases($args);
			break;
			
			case 'account:config':
				self::update_config();
			break;
					
			case 'web:dashboard':
				self::open_url('');
			break;
			
			case 'web:repos':
				self::open_url('repositories');
			break;
		}
		
		return TRUE;
	} // End of init
	
// ------------------------------------------------------------------------
	function open_url($path){
		
		$url = 'https://'.$this->beanstalk_account.'.beanstalkapp.com/'.$path;
		
		exec('open '.$url);
		
	}
	
	function create_release($params,$mode){
		
		self::_display_message('', '******************** DEPLOY REPO ********************');
		
		if($params[2] == ''){
			fwrite(STDOUT, "Please enter a repository name/ID: ");
			$repo_name = trim(fgets(STDIN));
		}else{
			$repo_name = $params[2];
		}
		
		$repo = self::make_api_call('repositories/'.$repo_name.'.xml');
		$envs = self::make_api_call($repo_name.'/server_environments.xml');
		
		self::display_errors($repo);
		self::display_errors($envs);
		
		self::_display_message('', 'Repo name: '.$repo->name);
		self::_display_message('', 'Revision: '.$repo->revision);
		self::_display_message('', 'Last commit: '.date('dS M Y @ H:i',strtotime($repo->{'last-commit-at'})));
		
		if(count($envs) > 0):
		
			self::_display_message('', 'Release Environments: ('.count($envs).')');
		
			foreach($envs as $env):
				self::_display_message('', '	'.$env->name.' ('.$env->{'current-version'}.')');
			endforeach;
		else:
			self::_display_message('error', 'This repo does not contain any release environments');
		endif;
		
		fwrite(STDOUT, "Please enter an Environment name to deploy: ");
		$env_name = trim(fgets(STDIN));
		
		$repo_id = $repo->id;
		
		$env = self::make_api_call($repo_id.'/server_environments/'.$env_name.'.xml');
		
		self::display_errors($env);
		
		if(!$env) self::_display_message('error', 'No environment found matching '.$env_name.'. Please try again');
		
		$env_id = $env->id;
		
		fwrite(STDOUT, "Please enter an revision number to deploy OR leave blank to deploy the latest revision: ");
		$rev_number = trim(fgets(STDIN));
		
		$confirmation_string = '';	
		
		if($rev_number == ''){
			$confirmation_string = "You are about to deploy Revision ".$repo->revision." to ".$env_name.", are you sure you want to continue? y/n: ";
			$rev_number = $repo->revision;
		}else{
			$confirmation_string = "You are about to deploy Revision ".$rev_number." to ".$env_name.", are you sure you want to continue? y/n: ";
		}
		
		fwrite(STDOUT, 'Please enter a release comment (optional): ');
		$comment = strtolower(trim(fgets(STDIN)));
		
		fwrite(STDOUT, $confirmation_string);
		$confirmation = strtolower(trim(fgets(STDIN)));
		
		if($confirmation == "n"){
			self::_display_message('', 'Deployment cancelled');
			exit();
		}
		
		if($mode=='all'){
			
				$post_string = '<release>
				  <deploy_from_scratch>true</deploy_from_scratch>
				  <revision type="integer">'.$rev_number.'</revision>
				  <comment><![CDATA['.$comment.']]></comment>
				</release>';
		}else{
			$post_string = '<release>
			  <revision type="integer">'.$rev_number.'</revision>
			  <comment><![CDATA['.$comment.']]></comment>
			</release>';
			
		}
				
		
		
		$release = self::make_api_post_call($repo_name.'/releases.xml?environment_id='.$env_id,$post_string);
		
		self::display_errors($release);
		
		self::check_status($release->state,$release->id,$repo_id);
		
	}
	
	function check_status($status,$id,$repo){
		
		switch($status){
			
			case 'pending':
			
				self::_display_message('', 'Deployment pending...');
				
				sleep(7);
				
				$release = self::make_api_call($repo.'/releases/'.$id.'.xml');
				
				self::check_status($release->state,$id,$repo);
				
			break;
			
			case 'waiting':
				self::_display_message('', 'Deployment waiting...');
				
				sleep(7);
				
				$release = self::make_api_call($repo.'/releases/'.$id.'.xml');
				
				self::check_status($release->state,$id,$repo);
				
			break;
			
			case 'failed':
				self::_display_message('', 'Deployment failed.');
			break;
			
			case 'success':
				self::_display_message('', 'Deployed successfully.');
			break;
			
			case 'skipped':
				self::_display_message('', 'Deployment skipped.');
			break;
		}
	}
	
	
	function update_config(){
		
		fwrite(STDOUT, 'Are you sure you wish to update your settings? y/n: ');
		$confirmation = strtolower(trim(fgets(STDIN)));
		
		if($confirmation == "n"){
			self::_display_message('', 'Update cancelled');
			exit();
		}
		
		$config_file = $_SERVER['HOME'].DIRECTORY_SEPARATOR.'beanstalk_cli.config';
		
		fwrite(STDOUT, "Please enter a Beanstalk Account Name:");
		$account_name = trim(fgets(STDIN));
		
		fwrite(STDOUT, "Please enter a Beanstalk User Name:");
		$user_name = trim(fgets(STDIN));
		
		fwrite(STDOUT, "Please enter your Beanstalk Password:");
		$password = trim(fgets(STDIN));				
		
		$config_file_details = "[account_settings]\naccount = ".$account_name."\nusername = ".$user_name."\npassword = ".$password;
		
		$fp = fopen($config_file, 'w+');
		fwrite($fp, $config_file_details);
		fclose($fp);
		
	}
	
	function fetch_changes($params){
		
		self::_display_message('', '******************** REPO CHANGES ********************');
		
		if($params[2] == ''){
			fwrite(STDOUT, "Please enter a repository name/ID: ");
			$repo_name = trim(fgets(STDIN));
		}else{
			$repo_name = $params[2];
		}
				
		$changeset = self::make_api_call('changesets/repository.xml?repository_id='.$repo_name);
		
		self::display_errors($changeset);
		
		$prev_date = date('d',strtotime($changeset->{'revision-cache'}[0]->time));
		self::_display_message('', '*** '. date('dS M Y',strtotime($changeset->{'revision-cache'}[0]->time)).' ***');
		
		foreach($changeset->{'revision-cache'} as $change):
		if(date('d',strtotime($change->time)) != $prev_date){
		self::_display_message('', '*** '. date('dS M Y',strtotime($change->time)).' ***');
		$prev_date = date('d',strtotime($change->time));
		} 
		
		self::_display_message('',$change->message. '('.$change->revision.')'."\n".'by '.$change->author.' at '.date('H:i',strtotime($change->time)));			
		endforeach;
		
		self::_display_message('', '********************');
	}
	
	function fetch_releases($params){
		
		self::_display_message('', '******************** REPO RELEASES ********************');
		
		if($params[2] == ''){
			fwrite(STDOUT, "Please enter a repository name/ID: ");
			$repo_name = trim(fgets(STDIN));
		}else{
			$repo_name = $params[2];
		}
				
		$releases = self::make_api_call($repo_name.'/releases.xml');
		
		self::display_errors($releases);
		
		$prev_date = date('d',strtotime($releases->release[0]->{'updated-at'}));
		self::_display_message('', '*** '. date('dS M Y',strtotime($releases->release[0]->{'updated-at'})).' ***');
		
		foreach($releases->release as $release):
		if(date('d',strtotime($release->{'updated-at'})) != $prev_date){
		self::_display_message('', '*** '. date('dS M Y',strtotime($release->{'updated-at'})).' ***');
		$prev_date = date('d',strtotime($release->{'updated-at'}));
		} 
		
		self::_display_message('',$release->{'environment-name'}. ' ('.$release->revision.') by '.$release->author.' at '.date('H:i',strtotime($release->{'updated-at'}))."\n".$release->comment."\n".$release->state );

			
		endforeach;
		
		self::_display_message('', '********************');
	}
	
	function fetch_repo($params){
		
		self::_display_message('', '******************** REPO INFO ********************');
		
		if($params[2] == ''){
			fwrite(STDOUT, "Please enter a repository name/ID: ");
			$repo_name = trim(fgets(STDIN));
		}else{
			$repo_name = $params[2];
		}
				
		$repo = self::make_api_call('repositories/'.$repo_name.'.xml');
		$envs = self::make_api_call($repo_name.'/server_environments.xml');
		
		
		self::display_errors($repo);
		self::display_errors($envs);
		
		if(!$repo) self::_display_message('error', 'No repo found matching: '.$repo_name);
		
		self::_display_message('', 'Repo name: '.$repo->name);
		self::_display_message('', 'Revision: '.$repo->revision);
		$type = $repo->type=='SubversionRepository'?'SVN':'GIT';
		self::_display_message('', 'Type: '.$type);
		self::_display_message('', 'Last commit: '.date('dS M Y @ H:i',strtotime($repo->{'last-commit-at'})));
		if ($type == 'SVN') { 
			$path ='https://'.$this->beanstalk_username.'@'.$this->beanstalk_account.'.svn.beanstalkapp.com/'.$repo->name.'/';
		} else {
			$path ='git@'.$this->beanstalk_account.'beanstakapp.com:/'.$repo->name.'.git';
		}
		
		self::_display_message('', 'Path: '.$path);
		
		if(count($envs) > 0):
		
			self::_display_message('', 'Release Environments: ('.count($envs).')');
		
			foreach($envs as $env):
				self::_display_message('', '	'.$env->name.' ('.$env->{'current-version'}.')');
			endforeach;
		
		endif;
		
		self::_display_message('', '********************');
		
	}
	
	/**
	 * Lists repos for the current account
	 *
	 * @access public
	 * @static
	 * @return void
	 * @author Leon Barrett
	 */
	public function list_repos(){
				
		self::_display_message('', '********************  REPOSITORIES FOR '.$this->beanstalk_account. '  ********************');
		
		$repos = self::make_api_call('repositories.xml');
		
		self::display_errors($repos);
		
		if(count($repos->repository)>0):
						
			foreach($repos->repository as $repo):
				$type = $repo->type=='SubversionRepository'?'SVN':'GIT';
				$_message = $this->colourOutput('●',$repo->{'color-label'}).' ';				
				$_message .= $repo->title;
				$_message .= ' ('.$repo->name.') ';
				if ($type == 'SVN') { 
					$_message .=' https://'.$this->beanstalk_username.'@'.$this->beanstalk_account.'.svn.beanstalkapp.com/'.$repo->name.'/';
				} else {
					$_message .=' - git@'.$this->beanstalk_account.'beanstakapp.com:/'.$repo->name.'.git';
				}
				$_message .= "\n";
					
				fwrite(STDOUT, $_message);
				
			endforeach;
			
		else:
		
			self::_display_message('error', 'No repos for '.$this->beanstalk_account);
			
		endif;
		
		self::_display_message('', '********************');
		
	}
	
		
	/**
	 * Creates a repo. Wizard guides through settings
	 *
	 * @access public
	 * @static
	 * @return void
	 * @author Leon Barrett
	 */
	 
	public function create_repo_wizard($params){
		
		self::_display_message('', '******************** CREATE REPO ********************');
		
		if($params[2] == ''){
			fwrite(STDOUT, "Please enter a repository name: ");
			$repo_name = trim(fgets(STDIN));
		}else{
			$repo_name = $params[2];
		}
		
		//Get Repo Type and check
		fwrite(STDOUT, "Enter repo type? svn/git: ");
		$repo_type = trim(fgets(STDIN));
		
		if (!in_array($repo_type, self::$_valid_beanstalk_repo_types)){
			fwrite(STDOUT, "Enter a valid repo type! svn/git : ");
			$repo_type = trim(fgets(STDIN));
		}
		
		
		//Get Repo Colour
		fwrite(STDOUT, "Enter repo colour label : ");
		$repo_colour = trim(fgets(STDIN));
		
		if (!in_array($repo_colour, self::$_valid_beanstalk_colours)){
			fwrite(STDOUT, "Enter a valid repo colour label : ");
			$repo_colour = trim(fgets(STDIN));
		}
		
		$title = self::_create_slug($repo_name);
		
		self::_display_message('notice', 'Starting to create '.$repo_name);
		
		
		if($repo_type == 'git'){
		
			self::_display_message('', 'Starting to create '.$repo_name);
			
			$api_data = '<?xml version="1.0" encoding="UTF-8"?>
			<repository>
			  <name>'.$title.'</name>
			  <title>'.$repo_name.'</title>
			  <color_label>label-'.$repo_colour.'</color_label>
			  <type_id>git</type_id>
			</repository>';		
			
			$create_empty_repo = self::make_api_post_call('repositories.xml',$api_data);
			
			self::display_errors($create_empty_repo);
	
			self::_display_message('', 'Finished setting up GIT repo - '.$repo_name);
			self::_display_message('', 'Git clone URL git@'.$this->beanstalk_account.'.beanstalkapp.com:/'.$repo_name.'.git');
			
			self::_display_message('', '********************');
		
		
		}elseif($repo_type == 'svn'){
		
			$api_data = '<?xml version="1.0" encoding="UTF-8"?>
			<repository>
			  <name>'.$title.'</name>
			  <title>'.$repo_name.'</title>
			  <color_label>label-'.$repo_colour.'</color_label>
			  <create_structure type="boolean">true</create_structure>
			</repository>';		
			
			$create_empty_repo = self::make_api_post_call('repositories.xml',$api_data);
			
			self::display_errors($create_empty_repo);
			
			self::_display_message('', 'Created '.$repo_name);
			
			fwrite(STDOUT, "Do you wish to create a Staging Environment? y/n: ");
			$create_staging = trim(fgets(STDIN));
			
			if($create_staging == 'y'){
				
				self::_display_message('', 'Setting up Staging Environment for '.$repo_name);
			
				$new_repo_id = $create_empty_repo->id;
				
				$api_data = '<?xml version="1.0" encoding="UTF-8"?>
				<server-environment>  
				  <name>Staging</name>
				  <automatic>true</automatic>
				  <color_label>label-grey</color_label>
				</server-environment>';
				
				$create_staging_env = self::make_api_post_call($new_repo_id.'/server_environments.xml',$api_data);
				
				self::display_errors($create_staging_env);
		
				self::_display_message('', 'Created Staging Environment');
				
			}
			
			fwrite(STDOUT, "Do you wish to create a Production Environment? y/n: ");
			$create_production = trim(fgets(STDIN));
			
			if($create_production == 'y'){
			
				self::_display_message('', 'Setting up Production Environment for '.$repo_name);
			
				$api_data = '<?xml version="1.0" encoding="UTF-8"?>
				<server-environment>  
				  <name>Production</name>
				  <automatic>false</automatic>
				  <color_label>label-green</color_label>
				</server-environment>';
				
				$create_prod_env = self::make_api_post_call($new_repo_id.'/server_environments.xml',$api_data);
				
				self::display_errors($create_prod_env);
				
				self::_display_message('', 'Created Production Environment');
			}
			
			self::_display_message('', 'Finished setting up '.$repo_name);
			self::_display_message('', 'Repo path:  https://'.$this->beanstalk_account.'.svn.beanstalkapp.com/'.$repo_name);		
		
			self::_display_message('', '********************');
		
		}
		
	} 
	
		
// ------------------------------------------------------------------------
	
	/**
	 * Displays help for the end user
	 *
	 * @access public
	 * @static
	 * @return void
	 * @author Leon Barrett
	 */
	public function help($error = false)
	{	
		if ($error):
			$string .= $error ."\n\n.";
		endif;
		$string .= "== Beanstalk

This is a command line tool to control Beanstalk (http://beanstalkapp.com/) repositories, environments and deployments.

== General Commands

help                            # Display this message
repo:create                     # Create a repo. Follow on screen prompts for more info
repo:list                       # List current repositories
repo:changes <repo_name>        # List changes for a repository
repo:releases <repo_name>       # List releases for a repository
repo:info <repo_name>           # Display repository information
account:config                  # Change your account details (stored in .config file)
repo:deploy <repo_name>         # Allows you to deploy a repository. Follow on screen prompts for more info
repo:deploy-all <repo_name>     # Allows you to re-deploy all files to a repository. Follow on screen prompts for more info
";
		
		$string .= "\n";
		
		fwrite(STDOUT, $string);
		exit();
	} // End of help
	
// ------------------------------------------------------------------------
	
	/**
	 * Display a message. If it's an error message, also terminate
	 * the execution of the script.
	 *
	 * @access protected
	 * @static
	 * @param string $type : The type of the message. Leave empty to send a regular message.
	 * @param string $message : The message.
	 * @return void
	 * @author Leon Barrett
	 */
	protected static function _display_message($type = '', $message = '', $continue = FALSE)
	{
		if (empty($message))
		{
			$type = 'error';
			$message = 'You tried to display a message but didn\'t provide the message...';
		}
		
		$_message_type = array(
			'error', 'warning', 'notice',
		);
		
		$_label = '';
		if (in_array($type, $_message_type))
		{
			$_label = strtoupper($type) . ': ';
		}
		
		$_message  = "\n";
		$_message .= $_label . $message;
		$_message .= "\n";
		
		fwrite(STDOUT, $_message);
		unset($_label, $_message, $message);
		
		if ($type == 'error' && $continue === FALSE)
			exit();
		else
			return;
	} // End of _display_message
	
	public function display_errors($call){
		
		if($call->error){
			self::_display_message('error', 'Errors',TRUE);
			
			foreach($call->error as $error):
				self::_display_message('error', $error,TRUE);
			endforeach;
			
			exit();
		}
		
	}
	
	/**
	 * Creates a slug for the repo name
	 *
	 * @access public
	 * @static
	 * @param string $str: input string
	 * @return void
	 * @author Leon Barrett
	 */
	public function _create_slug($str, $replace=array(), $delimiter='-') {

		setlocale(LC_ALL, 'en_US.UTF8');
		
		if( !empty($replace) ) {
			$str = str_replace((array)$replace, ' ', $str);
		}
		
		$clean = iconv('UTF-8', 'ASCII//TRANSLIT', $str);
		$clean = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $clean);
		$clean = strtolower(trim($clean, '-'));
		$clean = preg_replace("/[\/_|+ -]+/", $delimiter, $clean);
		
		return $clean;
	}
	
	/**
	 * Makes a standard API call
	 *
	 * @access public
	 * @static
	 * @param $api_params
	 * @return void
	 * @author Leon Barrett
	 */
	public function make_api_call($api_params){
	
	  $url = "https://" . $this->beanstalk_account . ".beanstalkapp.com/api/" . $api_params;
	
		$ch = NULL;
		$results = NULL;
		
		$ch = curl_init();
	
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_USERPWD, $this->beanstalk_username . ':' . $this->beanstalk_password);
	
		$results = curl_exec($ch);
		curl_close($ch);
		
		$xml = @simplexml_load_string($results);
		
		if(!$xml){
			$errors[0] = 'error';
			$errors[1] = $results;
			return false;
		}

		return $xml;
		
	}
	
	/**
	 * Makes a write API call
	 *
	 * @access public
	 * @static
	 * @params $api_params, $post_string: XML post data
	 * @return void
	 * @author Leon Barrett
	 */
	public function make_api_post_call($api_params,$post_string){
	
	  	$url = "https://" .$this->beanstalk_account . ".beanstalkapp.com/api/" . $api_params;
	
		$ch = NULL;
		$result = NULL;
		
		//open connection
		$ch = curl_init();
		
		//set the url, number of POST vars, POST data
		curl_setopt($ch,CURLOPT_URL,$url);
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: text/xml'));
		curl_setopt($ch,CURLOPT_POSTFIELDS,"$post_string");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		
		curl_setopt($ch, CURLOPT_USERPWD, $this->beanstalk_username . ':' . $this->beanstalk_password);
		//execute post
		$result = curl_exec($ch);
		
		//close connection
		curl_close($ch);
				
		$xml = @simplexml_load_string($result);
				
		if(!$xml){
			
			return false;
		}

		return $xml;
		
		
	}
	
	
} // End of Beanstalk class

// -Query-Validation-------------------------------------------------------
try {
	$beanstalk = new Beanstalk();
	$beanstalk->init($argv);
} catch (Exception $e) {
	exit('ERROR: ' . $e->getMessage() . "\n");
}
// ------------------------------------------------------------------------
